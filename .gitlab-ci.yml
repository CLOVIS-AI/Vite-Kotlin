stages:
  - docker  # create images that are needed by the rest of the build
  - build   # create any outputs of the project (binaries, containers, charts…)
  - test    # all quality checks
  - deploy  # export the outputs (publish to an artifact registry, deploy on a server…)

include:
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/version.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/mirror.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/gradle.gitlab-ci.yml
  - remote: https://gitlab.com/opensavvy/ci-templates/-/raw/main/docker.gitlab-ci.yml

variables:
  # https://gitlab.com/opensavvy/automation/containers
  ci_containers: 0.2.0

  # Kotlin Multiplatform
  kotlin_jvm: "yes"
  kotlin_js_browser: "no"
  kotlin_js_node: "no"
  kotlin_native_linuxX64: "no"
  kotlin_native_iosArm64: "no"

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# region Kotlin Multiplatform

.kotlin-jvm:
  extends: [ .os.gradle ]
  image: registry.gitlab.com/opensavvy/automation/containers/java:latest
  needs: [ os.version ]

  rules:
    - if: $kotlin_jvm == "yes"
      when: always
    - when: never

.kotlin-js-browser:
  extends: [ .os.gradle ]
  image: registry.gitlab.com/opensavvy/automation/containers/chromium:latest
  needs: [ os.version ]

  rules:
    - if: $kotlin_js_browser == "yes"
      when: always
    - when: never

.kotlin-js-node:
  extends: [ .os.gradle ]
  image: registry.gitlab.com/opensavvy/automation/containers/chromium:latest
  needs: [ os.version ]

  rules:
    - if: $kotlin_js_node == "yes"
      when: always
    - when: never

.kotlin-native-linuxX64:
  extends: [ .kotlin-jvm ] # it already runs on Linux

  rules:
    - if: $kotlin_native_linuxX64 == "yes"
      when: always
    - when: never

.kotlin-native-iosArm64:
  extends: [ .os.gradle ]
  image: macos-13-xcode-14
  needs: [ os.version ]

  before_script:
    - xcodebuild -downloadPlatform iOS
  tags:
    - saas-macos-medium-m1

  rules:
    - if: $kotlin_native_iosArm64 == "yes"
      when: always
    - when: never

# endregion
# region Check

check[jvm]:
  extends: [ .kotlin-jvm ]
  stage: test

  script:
    - >
      ./gradlew check
      -x jsBrowserTest
      -x jsNodeTest
      -x linuxX64Test
      -x iosSimulatorArm64Test
      -PappVersion=$project_version

  interruptible: true

check[jsBrowser]:
  extends: [ .kotlin-js-browser ]
  stage: test

  script:
    - >
      ./gradlew jsBrowserTest
      -PappVersion=$project_version

  interruptible: true

check[nodeJs]:
  extends: [ .kotlin-js-node ]
  stage: test

  script:
    - >
      ./gradlew jsNodeTest
      -PappVersion=$project_version

  interruptible: true

check[linuxX64]:
  extends: [ .kotlin-native-linuxX64 ]
  stage: test

  script:
    - >
      ./gradlew linuxX64Test
      -PappVersion=$project_version

  interruptible: true

check[iosArm64]:
  extends: [ .kotlin-native-iosArm64 ]
  stage: test

  script:
    - >
      ./gradlew iosSimulatorArm64Test
      --no-configuration-cache
      -PappVersion=$project_version

  interruptible: true

# endregion
# region Examples

.example:
  stage: test
  extends: [ .os.gradle ]
  needs: [ ]

  script:
    - >
      ./gradlew
      -p examples/$example
      --include-build ../..
      --configure-on-demand
      --configuration-cache
      tasks dumpViteConfiguration build

  interruptible: true

example:simple:
  extends: [ .example ]
  variables:
    example: simple

  after_script:
    - mv examples/simple/build/vite/dist kotlin-example
    - PREFIX="$CI_PROJECT_ROOT_NAMESPACE/"
    - echo "URL=https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/${CI_PROJECT_PATH//$PREFIX}/-/jobs/$CI_JOB_ID/artifacts/kotlin-example/index.html" >>deploy.env
    - echo "# TYPE production_size gauge" >>metrics.txt
    - >
      for file in $(find kotlin-example);
      do
        result=$(du -sbh $file | tr -s ' ');
        size=$(<<<"$result" cut -f 1);
        name=$(<<<"$result" sed 's/\.\///;s/-[[:alnum:]]\+\./\./' | cut -f 2);
        echo "production_size{path=$name} $size" >>metrics.txt;
      done

  artifacts:
    paths:
      - kotlin-example
    expose_as: Simple example
    reports:
      metrics: metrics.txt
      dotenv: deploy.env
  environment:
    name: review/$CI_COMMIT_REF_SLUG/example-simple
    url: $URL
    deployment_tier: development
  interruptible: true

example:multi-project:
  extends: [ .example ]
  variables:
    example: multi-project

  after_script:
    - mv examples/multi-project/build/vite/dist kotlin-multi-example
    - PREFIX="$CI_PROJECT_ROOT_NAMESPACE/"
    - echo "URL=https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/${CI_PROJECT_PATH//$PREFIX}/-/jobs/$CI_JOB_ID/artifacts/kotlin-multi-example/index.html" >>deploy.env

  artifacts:
    paths:
      - kotlin-multi-example
    expose_as: Multi-project example
  environment:
    name: review/$CI_COMMIT_REF_SLUG/example-multi-project
    url: $URL
    deployment_tier: development

example:tailwind:
  extends: [ .example ]
  variables:
    example: tailwind

  after_script:
    - mv examples/tailwind/build/vite/dist kotlin-tailwind
    - PREFIX="$CI_PROJECT_ROOT_NAMESPACE/"
    - echo "URL=https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/${CI_PROJECT_PATH//$PREFIX}/-/jobs/$CI_JOB_ID/artifacts/kotlin-tailwind/index.html" >>deploy.env

  allow_failure: true # TODO: remove after https://gitlab.com/opensavvy/automation/kotlin-vite/-/issues/37

  artifacts:
    paths:
      - kotlin-tailwind
    expose_as: Tailwind example
  environment:
    name: review/$CI_COMMIT_REF_SLUG/example-tailwind
    url: $URL
    deployment_tier: development

# endregion
# region Publishing

publish-maven:gitlab:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: deploy

  script:
    - >
      ./gradlew publishAllPublicationsToGitLabRepository
      --no-configuration-cache
      -PappVersion=$project_version

  interruptible: false
  rules:
    - if: $PUBLISH_MAVEN == "no" || $PUBLISH_MAVEN_GITLAB == "no"
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

publish-maven:central:initialize:
  extends: [ .os.gradle ]
  needs: [ os.version ]
  stage: deploy

  script:
    - >
      ./gradlew initializeSonatypeStagingRepository
      --no-configuration-cache
      -PappVersion=$project_version

  interruptible: false
  rules:
    - if: $OSSRH_USERNAME == null || $OSSRH_PASSWORD == null
      when: never
    - if: $PUBLISH_MAVEN == "no" || $PUBLISH_MAVEN_CENTRAL == "no"
      when: never
    - if: $CI_COMMIT_TAG

publish-maven:central:
  extends: [ .os.gradle ]
  needs: [ os.version, publish-maven:central:initialize ]
  stage: deploy

  script:
    - export SIGNING_KEY_RING=$(mktemp)
    - <"$SIGNING_KEY_RING_B64" base64 -d >"$SIGNING_KEY_RING"
    - >
      ./gradlew findSonatypeStagingRepository publishToSonatype
      -x initializeSonatypeStagingRepository
      --no-configuration-cache
      -PappVersion=$project_version

  interruptible: false
  rules:
    - if: $OSSRH_USERNAME == null || $OSSRH_PASSWORD == null
      when: never
    - if: $PUBLISH_MAVEN == "no" || $PUBLISH_MAVEN_CENTRAL == "no"
      when: never
    - if: $CI_COMMIT_TAG

publish-maven:central:release:
  extends: [ .os.gradle ]
  needs: [ os.version, publish-maven:central ]
  stage: deploy

  script:
    - >
      ./gradlew findSonatypeStagingRepository closeAndReleaseSonatypeStagingRepository
      --no-configuration-cache
      -PappVersion=$project_version

  interruptible: false
  rules:
    - if: $OSSRH_USERNAME == null || $OSSRH_PASSWORD == null
      when: never
    - if: $PUBLISH_MAVEN == "no" || $PUBLISH_MAVEN_CENTRAL == "no"
      when: never
    - if: $CI_COMMIT_TAG

# endregion
# region API documentation

dokka:
  extends: [ .os.gradle ]
  stage: build
  needs: [ os.version ]

  script:
    - >
      ./gradlew :dokkatooGeneratePublicationHtml
      --no-configuration-cache
      -PappVersion=$project_version

  after_script:
    - mkdir -p api-docs
    - mv build/dokka/html/* api-docs
    - PREFIX="$CI_PROJECT_ROOT_NAMESPACE/"
    - echo "URL=https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/${CI_PROJECT_PATH//$PREFIX}/-/jobs/$CI_JOB_ID/artifacts/api-docs/index.html" >>deploy.env

  artifacts:
    paths:
      - api-docs
    reports:
      dotenv: deploy.env
  environment:
    name: review/$CI_COMMIT_REF_SLUG/api-docs
    url: $URL
    deployment_tier: development

  interruptible: true

# endregion
# region Automatically mirror the previous layer of the playground

mirror-playground:
  stage: deploy
  extends: [ .os.mirror ]
  needs: [ ]

  variables:
    url: "$playground_parent"
    name: "$playground_parent_name"
    key: "$playground_mirroring_key"
    key_public: "$playground_mirroring_key_public"

  rules:
    - if: $playground_parent == null || $playground_parent_name == null
      when: never
    - if: $playground_mirroring_key == null || $playground_mirroring_key_public == null
      when: never
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - when: manual
      allow_failure: true

# endregion
# region GitLab Pages

pages:
  image: alpine:latest
  stage: deploy
  needs:
    - job: dokka
      artifacts: true

  script:
    - mkdir -p public
    - mv api-docs public

  artifacts:
    paths:
      - public

  rules:
    - if: $CI_COMMIT_TAG
  interruptible: false

# endregion
